{
  "instance_id": "sphinx-doc__sphinx-9673",
  "results": [
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_description_no_undoc",
      "test_type": "FAIL_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc ERROR [100%]\n\n==================================== ERRORS ====================================\n________ ERROR at setup of test_autodoc_typehints_description_no_undoc _________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff741c3250>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff741c15d0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff741c15d0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['text'], kwargs={'confoverrides': {'autodoc_typehints': 'description', 'autodoc_typehints_description_target': 'documented'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff742d16c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff741c2d10>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff741c3250>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff741c15d0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_no_undoc - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.71s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autoclass_content_class",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autoclass_content_class ERROR    [100%]\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of test_autoclass_content_class ________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff76c1f280>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff76c1fc40>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff76c1fc40>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff76a696c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff76c1ef20>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff76c1f280>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff76c1fc40>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autoclass_content_class - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.70s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autoclass_content_init",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autoclass_content_init ERROR     [100%]\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of test_autoclass_content_init _________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8f78b040>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8f78b6a0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8f78b6a0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff8ec796c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff8f788af0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8f78b040>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8f78b6a0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autoclass_content_init - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.71s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_class_signature_mixed",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_class_signature_mixed ERROR [100%]\n\n==================================== ERRORS ====================================\n_____________ ERROR at setup of test_autodoc_class_signature_mixed _____________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8ae1ab90>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8ae1bd00>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8ae1bd00>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff8ac7d6c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff8ae1bee0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8ae1ab90>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8ae1bd00>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_mixed - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.70s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_class_signature_separated_init",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_init ERROR [100%]\n\n==================================== ERRORS ====================================\n________ ERROR at setup of test_autodoc_class_signature_separated_init _________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff7dc64a30>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff7dc65870>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff7dc65870>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff7d0696c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff7dc649d0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff7dc64a30>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff7dc65870>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_init - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.70s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_class_signature_separated_new",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_new ERROR [100%]\n\n==================================== ERRORS ====================================\n_________ ERROR at setup of test_autodoc_class_signature_separated_new _________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff7e905750>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff7e906d40>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff7e906d40>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff7e7596c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff7e9040d0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff7e905750>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff7e906d40>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_class_signature_separated_new - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.75s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autoclass_content_both",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autoclass_content_both ERROR     [100%]\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of test_autoclass_content_both _________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff85385510>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff85384bb0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff85384bb0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff852b96c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff853861d0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff85385510>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff85384bb0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autoclass_content_both - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.70s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_inherit_docstrings",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings ERROR [100%]\n\n==================================== ERRORS ====================================\n______________ ERROR at setup of test_autodoc_inherit_docstrings _______________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff71832620>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff718332e0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff718332e0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff720696c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff71833550>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff71832620>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff718332e0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.71s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_docstring_signature",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature ERROR [100%]\n\n==================================== ERRORS ====================================\n______________ ERROR at setup of test_autodoc_docstring_signature ______________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff683e1de0>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff683e3700>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff683e3700>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff686696c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff683e1f00>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff683e1de0>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff683e3700>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.74s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autoclass_content_and_docstring_signature_class",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class ERROR [100%]\n\n==================================== ERRORS ====================================\n____ ERROR at setup of test_autoclass_content_and_docstring_signature_class ____\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffffa2bce980>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffffa2bce260>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffffa2bce260>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffffa2051870>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffffa2bcdb10>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffffa2bce980>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffffa2bce260>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.74s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autoclass_content_and_docstring_signature_init",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init ERROR [100%]\n\n==================================== ERRORS ====================================\n____ ERROR at setup of test_autoclass_content_and_docstring_signature_init _____\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8ca11bd0>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8ca12dd0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8ca12dd0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff8c995870>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff8ca114b0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8ca11bd0>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8ca12dd0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.77s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autoclass_content_and_docstring_signature_both",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both ERROR [100%]\n\n==================================== ERRORS ====================================\n____ ERROR at setup of test_autoclass_content_and_docstring_signature_both _____\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff99a56140>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff99a56e00>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff99a56e00>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff998e1870>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff99a55420>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff99a56140>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff99a56e00>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.70s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_mocked_module_imports",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_mocked_module_imports ERROR      [100%]\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of test_mocked_module_imports _________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff89db22c0>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff89db09a0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff89db09a0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff89b096c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff89db1c60>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff89db22c0>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff89db09a0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_mocked_module_imports - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.72s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_signature",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature ERROR [100%]\n\n==================================== ERRORS ====================================\n______________ ERROR at setup of test_autodoc_typehints_signature ______________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff79182140>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff791830a0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff791830a0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'confoverrides': {'autodoc_typehints': 'signature'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff7905d6c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff79181210>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff79182140>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff791830a0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.71s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_none",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_none ERROR     [100%]\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of test_autodoc_typehints_none _________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff845d94e0>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff845da890>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff845da890>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'confoverrides': {'autodoc_typehints': 'none'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff83a716c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff845d8610>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff845d94e0>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff845da890>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.70s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_none_for_overload",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload ERROR [100%]\n\n==================================== ERRORS ====================================\n__________ ERROR at setup of test_autodoc_typehints_none_for_overload __________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8e6df220>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8e6dfc40>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8e6dfc40>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'confoverrides': {'autodoc_typehints': 'none'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff8e7696c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff8e6def20>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8e6df220>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8e6dfc40>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none_for_overload - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.72s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_description",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_description ERROR [100%]\n\n==================================== ERRORS ====================================\n_____________ ERROR at setup of test_autodoc_typehints_description _____________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff92f8f250>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff92f8d5d0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff92f8d5d0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['text'], kwargs={'confoverrides': {'autodoc_typehints': 'description'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff931056c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff92f8ed10>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff92f8f250>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff92f8d5d0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.71s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_description_with_documented_init",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init ERROR [100%]\n\n==================================== ERRORS ====================================\n__ ERROR at setup of test_autodoc_typehints_description_with_documented_init ___\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff986df220>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff986dfc40>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff986dfc40>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['text'], kwargs={'confoverrides': {'autodoc_typehints': 'description'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff985dd900>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff986def20>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff986df220>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff986dfc40>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.73s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_description_with_documented_init_no_undoc",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc ERROR [100%]\n\n==================================== ERRORS ====================================\n_ ERROR at setup of test_autodoc_typehints_description_with_documented_init_no_undoc _\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff89159690>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff89158610>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff89158610>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['text'], kwargs={'confoverrides': {'autodoc_typehints': 'description', 'autodoc_typehints_description_target': 'documented'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff89019750>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff8915b3d0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff89159690>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff89158610>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_with_documented_init_no_undoc - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.73s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_description_for_invalid_node",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node ERROR [100%]\n\n==================================== ERRORS ====================================\n____ ERROR at setup of test_autodoc_typehints_description_for_invalid_node _____\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffffa1405810>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffffa14056f0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffffa14056f0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['text'], kwargs={'confoverrides': {'autodoc_typehints': 'description'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffffa0a79870>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffffa1407250>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffffa1405810>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffffa14056f0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.72s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_both",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_both ERROR     [100%]\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of test_autodoc_typehints_both _________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff9b7b1330>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff9b7b3fa0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff9b7b3fa0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['text'], kwargs={'confoverrides': {'autodoc_typehints': 'both'}, 'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff9b5096c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff9b7b02b0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff9b7b1330>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff9b7b3fa0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_both - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.73s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_type_aliases",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_type_aliases ERROR       [100%]\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of test_autodoc_type_aliases __________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8b842950>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8b8435b0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8b8435b0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['text'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff8c0dd6c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff8b843520>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8b842950>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8b8435b0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.76s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_typehints_description_and_type_aliases",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases ERROR [100%]\n\n==================================== ERRORS ====================================\n____ ERROR at setup of test_autodoc_typehints_description_and_type_aliases _____\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff69435c30>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff694366e0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff694366e0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['text'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/autodoc_typehints_description_and_type_aliases'), 'confoverrides': {'autodoc_typehints': 'description', 'autodoc_type_aliases': {'myint': 'myint'}}})\nmake_app = <function make_app.<locals>.make at 0xffff6926d870>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff69436ad0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff69435c30>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff694366e0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_and_type_aliases - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.77s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_default_options",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_default_options ERROR    [100%]\n\n==================================== ERRORS ====================================\n________________ ERROR at setup of test_autodoc_default_options ________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff73219f30>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff73218fa0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff73218fa0>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff733016c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff73218f70>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff73219f30>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff73218fa0>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_default_options - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.72s ===============================\n",
      "stderr": ""
    },
    {
      "test_file": "tests/test_ext_autodoc_configs.py",
      "test_case": "test_autodoc_default_options_with_values",
      "test_type": "PASS_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/5fb51fb14, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values ERROR [100%]\n\n==================================== ERRORS ====================================\n__________ ERROR at setup of test_autodoc_default_options_with_values __________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff9db90a30>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff9db91870>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff9db91870>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=['html'], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/ext-autodoc')})\nmake_app = <function make_app.<locals>.make at 0xffff9db5d6c0>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff9db909d0>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff9db90a30>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff9db91870>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.72s ===============================\n",
      "stderr": ""
    }
  ]
}