{
  "instance_id": "sphinx-doc__sphinx-9711",
  "results": [
    {
      "test_file": "tests/test_extension.py",
      "test_case": "test_needs_extensions",
      "test_type": "FAIL_TO_PASS",
      "exit_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0 -- /usr/local/bin/python\ncachedir: .pytest_cache\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/app/repo/.hypothesis/examples'))\nlibraries: Sphinx-4.3.0+/81a4fd973, docutils-0.17.1\nbase tempdir: /tmp/pytest-of-root/pytest-0\nrootdir: /app/repo\nconfigfile: setup.cfg\nplugins: asdf-4.1.0, arraydiff-0.6.1, astropy-0.11.0, mock-3.14.0, remotedata-0.4.1, doctestplus-1.4.0, hypothesis-6.131.9, astropy-header-0.2.2, filter-subpackage-0.2.0, cov-6.1.1\ncollecting ... collected 1 item\n\ntests/test_extension.py::test_needs_extensions ERROR                     [100%]\n\n==================================== ERRORS ====================================\n___________________ ERROR at setup of test_needs_extensions ____________________\n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8b396260>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8b396f50>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n>                   metadata = setup(app)\n\nsphinx/registry.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/sphinxcontrib/applehelp/__init__.py:240: in setup\n    app.require_sphinx('5.0')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8b396f50>\nversion = '5.0'\n\n    def require_sphinx(self, version: str) -> None:\n        \"\"\"Check the Sphinx version if requested.\n    \n        Compare *version* with the version of the running Sphinx, and abort the\n        build when it is too old.\n    \n        :param version: The required version in the form of ``major.minor``.\n    \n        .. versionadded:: 1.0\n        \"\"\"\n        if version > sphinx.__display_version__[:3]:\n>           raise VersionRequirementError(version)\nE           sphinx.errors.VersionRequirementError: 5.0\n\nsphinx/application.py:406: VersionRequirementError\n\nThe above exception was the direct cause of the following exception:\n\ntest_params = {'shared_result': None}\napp_params = app_params(args=[], kwargs={'srcdir': path('/tmp/pytest-of-root/pytest-0/root')})\nmake_app = <function make_app.<locals>.make at 0xffff8b2f0670>\nshared_result = <sphinx.testing.fixtures.SharedResult object at 0xffff8b397940>\n\n    @pytest.fixture(scope='function')\n    def app(test_params: Dict, app_params: Tuple[Dict, Dict], make_app: Callable,\n            shared_result: SharedResult) -> Generator[SphinxTestApp, None, None]:\n        \"\"\"\n        Provides the 'sphinx.application.Sphinx' object\n        \"\"\"\n        args, kwargs = app_params\n>       app_ = make_app(*args, **kwargs)\n\nsphinx/testing/fixtures.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsphinx/testing/fixtures.py:193: in make\n    app_: Any = SphinxTestApp(*args, **kwargs)\nsphinx/testing/util.py:133: in __init__\n    super().__init__(srcdir, confdir, outdir, doctreedir,\nsphinx/application.py:233: in __init__\n    self.setup_extension(extension)\nsphinx/application.py:393: in setup_extension\n    self.registry.load_extension(self, extname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sphinx.registry.SphinxComponentRegistry object at 0xffff8b396260>\napp = <[AttributeError(\"'NoneType' object has no attribute 'name'\") raised in repr()] SphinxTestApp object at 0xffff8b396f50>\nextname = 'sphinxcontrib.applehelp'\n\n    def load_extension(self, app: \"Sphinx\", extname: str) -> None:\n        \"\"\"Load a Sphinx extension.\"\"\"\n        if extname in app.extensions:  # already loaded\n            return\n        if extname in EXTENSION_BLACKLIST:\n            logger.warning(__('the extension %r was already merged with Sphinx since '\n                              'version %s; this extension is ignored.'),\n                           extname, EXTENSION_BLACKLIST[extname])\n            return\n    \n        # update loading context\n        prefix = __('while setting up extension %s:') % extname\n        with prefixed_warnings(prefix):\n            try:\n                mod = import_module(extname)\n            except ImportError as err:\n                logger.verbose(__('Original exception:\\n') + traceback.format_exc())\n                raise ExtensionError(__('Could not import extension %s') % extname,\n                                     err) from err\n    \n            setup = getattr(mod, 'setup', None)\n            if setup is None:\n                logger.warning(__('extension %r has no setup() function; is it really '\n                                  'a Sphinx extension module?'), extname)\n                metadata: Dict[str, Any] = {}\n            else:\n                try:\n                    metadata = setup(app)\n                except VersionRequirementError as err:\n                    # add the extension name to the version required\n>                   raise VersionRequirementError(\n                        __('The %s extension used by this project needs at least '\n                           'Sphinx v%s; it therefore cannot be built with this '\n                           'version.') % (extname, err)\n                    ) from err\nE                   sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n\nsphinx/registry.py:445: VersionRequirementError\n=========================== short test summary info ============================\nERROR tests/test_extension.py::test_needs_extensions - sphinx.errors.VersionRequirementError: The sphinxcontrib.applehelp extension used by this project needs at least Sphinx v5.0; it therefore cannot be built with this version.\n=============================== 1 error in 0.59s ===============================\n",
      "stderr": ""
    }
  ]
}